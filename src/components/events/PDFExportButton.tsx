import React, { useState } from 'react';
import { Download } from 'lucide-react';
import QRCode from 'qrcode';
import jsPDF from 'jspdf';

interface PDFExportButtonProps {
  eventTitle: string;
  eventCode: string;
  eventLocation: string;
  startDateTime: string;
  endDateTime: string;
  className?: string;
  disabled?: boolean;
}

export const PDFExportButton: React.FC<PDFExportButtonProps> = ({
  eventTitle,
  eventCode,
  eventLocation,
  startDateTime,
  endDateTime,
  className = '',
  disabled = false,
}) => {
  const [isGenerating, setIsGenerating] = useState(false);

  const generateEventSummaryPDF = async () => {
    if (!eventCode) return;

    try {
      setIsGenerating(true);

      // Generate QR code for the event code
      const qrDataUrl = await QRCode.toDataURL(eventCode, {
        width: 300,
        margin: 2,
        color: {
          dark: '#000000',
          light: '#FFFFFF'
        }
      });

      // Create PDF
      const pdf = new jsPDF({
        orientation: 'portrait',
        unit: 'mm',
        format: 'a4'
      });

      // Add header with Eletsa branding
      pdf.setFillColor(30, 48, 255); // #1E30FF
      pdf.rect(0, 0, 210, 40, 'F');
      
      // Add Eletsa logo/text
      pdf.setTextColor(255, 255, 255);
      pdf.setFontSize(24);
      pdf.setFont('helvetica', 'bold');
      pdf.text('Eletsa', 20, 25);
      
      // Add website URL
      pdf.setFontSize(10);
      pdf.setFont('helvetica', 'normal');
      pdf.text('https://eletsa.cairns.co.za', 150, 25);

      // Event Summary Title
      pdf.setTextColor(0, 0, 0);
      pdf.setFontSize(20);
      pdf.setFont('helvetica', 'bold');
      pdf.text('Event Summary', 20, 60);

      // Event Title
      pdf.setFontSize(16);
      pdf.setFont('helvetica', 'bold');
      const titleLines = pdf.splitTextToSize(eventTitle, 170);
      pdf.text(titleLines, 20, 80);
      
      let currentY = 80 + (titleLines.length * 8);

      // Event Location
      pdf.setFontSize(12);
      pdf.setFont('helvetica', 'normal');
      pdf.text('Location:', 20, currentY + 15);
      pdf.setFont('helvetica', 'bold');
      const locationLines = pdf.splitTextToSize(eventLocation, 150);
      pdf.text(locationLines, 20, currentY + 25);
      
      currentY += 25 + (locationLines.length * 6);

      // Event Date & Time
      pdf.setFont('helvetica', 'normal');
      pdf.text('Date & Time:', 20, currentY + 15);
      pdf.setFont('helvetica', 'bold');
      const startDate = new Date(startDateTime);
      const endDate = new Date(endDateTime);
      const dateTimeText = `${startDate.toLocaleDateString('en-US', {
        weekday: 'long',
        year: 'numeric',
        month: 'long',
        day: 'numeric',
      })} ${startDate.toLocaleTimeString('en-US', {
        hour: 'numeric',
        minute: '2-digit',
        hour12: true,
      })} - ${endDate.toLocaleTimeString('en-US', {
        hour: 'numeric',
        minute: '2-digit',
        hour12: true,
      })}`;
      const dateTimeLines = pdf.splitTextToSize(dateTimeText, 150);
      pdf.text(dateTimeLines, 20, currentY + 25);
      
      currentY += 25 + (dateTimeLines.length * 6);

      // QR Code Section
      pdf.setFont('helvetica', 'normal');
      pdf.text('Event Code:', 20, currentY + 20);
      
      // Add QR code
      pdf.addImage(qrDataUrl, 'PNG', 20, currentY + 30, 60, 60);
      
      // Add event code text
      pdf.setFontSize(10);
      pdf.setFont('helvetica', 'normal');
      pdf.text('Event Code:', 90, currentY + 45);
      pdf.setFont('helvetica', 'bold');
      pdf.text(eventCode, 90, currentY + 55);
      
      pdf.setFont('helvetica', 'normal');
      pdf.text('Scan this QR code or use the code above', 90, currentY + 70);
      pdf.text('for event management and verification.', 90, currentY + 80);

      // Footer
      pdf.setFontSize(8);
      pdf.setTextColor(128, 128, 128);
      pdf.text('Generated by Eletsa Event Management System', 20, 280);
      pdf.text(`Generated on: ${new Date().toLocaleString()}`, 20, 285);

      // Download the PDF
      const fileName = `event-summary-${eventTitle.replace(/[^a-z0-9]/gi, '_').toLowerCase()}.pdf`;
      pdf.save(fileName);

    } catch (error) {
      console.error('Failed to generate PDF:', error);
      alert('Failed to generate PDF. Please try again.');
    } finally {
      setIsGenerating(false);
    }
  };

  return (
    <button
      onClick={generateEventSummaryPDF}
      disabled={disabled || isGenerating}
      className={`bg-gradient-to-r from-[#1E30FF] to-[#FF2D95] text-white px-4 py-2 rounded-lg font-medium hover:opacity-90 transition-all duration-200 disabled:opacity-50 disabled:cursor-not-allowed flex items-center space-x-2 ${className}`}
    >
      <Download className="w-4 h-4" />
      <span>{isGenerating ? 'Generating PDF...' : 'Download Event Summary'}</span>
    </button>
  );
};